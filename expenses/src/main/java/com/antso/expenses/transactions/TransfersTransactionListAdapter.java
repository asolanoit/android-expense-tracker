package com.antso.expenses.transactions;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.antso.expenses.R;
import com.antso.expenses.accounts.AccountManager;
import com.antso.expenses.entities.Account;
import com.antso.expenses.entities.Transaction;
import com.antso.expenses.utils.Utils;
import com.antso.expenses.views.CircleSectorView;

import java.util.List;


public class TransfersTransactionListAdapter
        extends AbstractTransactionListAdapter<CompoundedTransferTransaction> {

    public TransfersTransactionListAdapter(Context context, HandlingFooterFragment fragment) {
        super(context, fragment);
    }

    @Override
    protected List<CompoundedTransferTransaction> retrieveTransactions() {
        return TransactionManager.TRANSACTION_MANAGER().getTransferTransactions();
    }

    @Override
    protected String getDescription(CompoundedTransferTransaction transactions) {
        return transactions.getOutTransaction().getDescription();
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        final CompoundedTransferTransaction transaction = transactions.get(position);
        final Transaction t1 = transaction.getOutTransaction();
        final Transaction t2 = transaction.getInTransaction();
        final Transaction tFee = transaction.getFeeTransaction();

        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        LinearLayout transactionLayout = (LinearLayout) inflater.inflate(R.layout.transaction_item, null, false);

        LinearLayout accountAndBudgetLabel = (LinearLayout) transactionLayout.findViewById(R.id.accountAndBudgetLabel);
        LinearLayout accountAndAccountLabel = (LinearLayout) transactionLayout.findViewById(R.id.accountAndAccountLabel);
        accountAndBudgetLabel.setVisibility(View.GONE);
        accountAndAccountLabel.setVisibility(View.VISIBLE);

        AccountManager.AccountInfo accountPrimaryInfo =
                AccountManager.ACCOUNT_MANAGER().getAccountInfo(t1.getAccountId());
        AccountManager.AccountInfo accountSecondaryInfo =
                AccountManager.ACCOUNT_MANAGER().getAccountInfo(t2.getAccountId());

        if(accountPrimaryInfo != null) {
            Account account = accountPrimaryInfo.account;
            final TextView accountPrimaryName =
                    (TextView) transactionLayout.findViewById(R.id.budgetName);
            accountPrimaryName.setText(account.getName());

            final CircleSectorView accountPrimaryColor =
                    (CircleSectorView) transactionLayout.findViewById(R.id.budgetColor);
            accountPrimaryColor.setColor(account.getColor());
        }

        if(accountSecondaryInfo != null) {
            Account account = accountSecondaryInfo.account;
            final TextView accountSecondaryName =
                    (TextView) transactionLayout.findViewById(R.id.accountName);
            accountSecondaryName.setText(account.getName());

            final CircleSectorView accountSecondaryColor =
                    (CircleSectorView) transactionLayout.findViewById(R.id.accountColor);
            accountSecondaryColor.setColor(account.getColor());
        }

        final TextView transactionDateTime = (TextView) transactionLayout.findViewById(R.id.transactionDateTime);
        String dateTime = Utils.formatDate(t1.getDate());
        transactionDateTime.setText(dateTime);

        final ImageView transactionRecurrent = (ImageView) transactionLayout.findViewById(R.id.transactionRecurrent);
        if (t1.getRecurrent() && !t1.isAutoGenerated()) {
            transactionRecurrent.setVisibility(View.VISIBLE);
        } else {
            transactionRecurrent.setVisibility(View.INVISIBLE);
        }

        final TextView transactionDesc = (TextView) transactionLayout.findViewById(R.id.transactionDesc);
        transactionDesc.setText(t1.getDescription());

        final TextView transactionValue = (TextView) transactionLayout.findViewById(R.id.transactionValue);
        String balance = Utils.getCurrencyString(context) + " " +
                t1.getValue().setScale(2).toPlainString();
        if (tFee != null) {
            balance = balance + " (" + tFee.getValue().setScale(2).toPlainString() + ")";

        }
        transactionValue.setText(balance);

        return transactionLayout;
    }
}
